# sum
temp <- 0
for(i in 1:nimp){
f.temp <- f.samples[i,]
temp <- temp + pnorm(y * f.temp) * gp.prior$density(f.temp) / laplace.approx$density(f.temp)
}
return(temp/nimp)
}
get.approx.marginal(100, c(1,1), laplace.approx)
get.prop.distn <- function(sd){
out <- list()
out$sample <-  function(theta){
return(rnorm(1, theta, sd))
}
out$density = function(x, theta){
return(dnorm(x, theta, sd))
}
return(out)
}
prop.distn <- get.prop.distn(1)
algo.1 <- function(y, x, nsteps, nimp, init.theta, init.marginal.lik, prop.distn){
prior <- get.gamma.prior(5,5)
theta.samples <- matrix(NA, nrow=nsteps, ncol=length(init.theta))
f.samples <- matrix(NA, nrow=nsteps, ncol = length(y))
acceptance.ratio <- 0
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
kernel <- function(x,y) return(kernel_gaussian(x, y, init.theta[1], init.theta[2]))
laplace.approx <- get.laplace.approx(y, K)
p.tilde <- get.approx.marginal(nimp, init.theta, laplace.approx)
theta <- init.theta
for(i in 1:nsteps){
# Algorithm 1 for sampling theta
theta.prop <- c(prop.distn$sample(theta[1]), prop.distn$sample(theta[2]))
laplace.approx <- get.laplace.approx(y, K)
p.tilde.prop <- get.approx.marginal(nimp, theta.prop, laplace.approx)
acceptance.prob <- min(1, p.tilde.prop * prior$density(theta.prop) / p.tilde / prior$density(theta) * prop.distn$density(theta[1], theta.prop[1]) * prop.distn$density(theta[2], theta.prop[2]) / prop.distn$density(theta.prop[1], theta[1]) / prop.distn$density(theta.prop[1], theta[1]))
if(runif(1) < acceptance.prob){
theta <- theta.prop
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
kernel <- function(x,y) return(kernel_gaussian(x, y, theta[1], theta[2]))
p.tilde <- p.tilde.prop
acceptance.ratio <- acceptance.ratio + 1
}
theta.samples[i,] <- theta
# Using theta to sample f from zero mean GP prior
f.samples[i,] <- rmvnorm(1, rep(0,length(y)), K)
}
acceptance.ratio <- acceptance.ratio/nsteps
out <- list()
out$acceptance.ratio <- acceptance.ratio
out$theta.samples <- theta.samples
out$f.samples <- f.samples
return(out)
}
niter = 2000
temp <- algo.1(y, x, niter, 100, c(0.01,0.01), rep(0,20), get.prop.distn(0.01))
par(mfrow=c(2,1))
plot(1:niter, temp$theta.samples[,1], type="l")
plot(1:niter, temp$theta.samples[,2], type="l")
niter = 1000
temp <- algo.1(y, x, niter, 100, c(0.01,0.01), rep(0,20), get.prop.distn(1))
par(mfrow=c(2,1))
plot(1:niter, temp$theta.samples[,1], type="l")
plot(1:niter, temp$theta.samples[,2], type="l")
niter = 1000
temp <- algo.1(y, x, niter, 100, c(0.01,0.01), rep(0,20), get.prop.distn(.5))
par(mfrow=c(2,1))
plot(1:niter, temp$theta.samples[,1], type="l")
plot(1:niter, temp$theta.samples[,2], type="l")
knitr::opts_chunk$set(echo = TRUE)
get.gamma.prior <- function(alpha, beta){
out <- list()
out$sample <- function(){
return(rgamma(1, alpha, beta))
}
out$density <- function(x){
return(dgamma(x, alpha, beta))
}
return(out)
}
sigma.prior <- gamma.prior <- get.gamma.prior(5,5)
kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
get.log.lik <- function(){
out <- list()
out$log.lik <- function(y, f){
return(log(pnorm(y * f, 0, 1)))
}
out$dlog.lik.f <- function(y, f){
return(y * dnorm(f, 0, 1) / pnorm(y * f))
}
out$d2log.lik.f2 <- function(y, f){
return(as.vector(-dnorm(f)^2/pnorm(y*f)^2 - y * f * dnorm(f) / pnorm(y * f)))
}
return(out)
}
x <- seq(-10,10,length.out=20)
y <- ifelse(x > 0, 1, -1)
kernel <- function(x,y) return(kernel_gaussian(x, y, 1, 1))
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
get.laplace.approx <- function(y, K){
n <- length(y)
f <- rep(99, n); fnew <- rep(0, n)
ll <- get.log.lik()
while(mean((f - fnew)^2) > 1e-8){
f = fnew
W <- - diag(ll$d2log.lik.f2(y, f))
L <-  chol(diag(n) + sqrt(W) %*% K %*% sqrt(W))
b <-  W %*% f + ll$dlog.lik.f(y, f)
a <- b - solve(sqrt(W) %*% t(L), solve(t(L), sqrt(W) %*% K %*% b))
fnew = K %*% a
i=i+1
}
out <- list()
out$f.hat <- fnew
out$sigma.hat <- -diag(ll$d2log.lik.f2(y, out$f.hat))
out$sample <- function(n){
return(rmvnorm(n, out$f.hat, out$sigma.hat))
}
out$density <- function(f){
return(dmvnorm(f, out$f.hat, out$sigma.hat))
}
return(out)
}
laplace.approx <- get.laplace.approx(y, K)
knitr::opts_chunk$set(echo = TRUE)
library(mvtnorm)
get.gamma.prior <- function(alpha, beta){
out <- list()
out$sample <- function(){
return(rgamma(1, alpha, beta))
}
out$density <- function(x){
return(dgamma(x, alpha, beta))
}
return(out)
}
sigma.prior <- gamma.prior <- get.gamma.prior(5,5)
kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
get.log.lik <- function(){
out <- list()
out$log.lik <- function(y, f){
return(log(pnorm(y * f, 0, 1)))
}
out$dlog.lik.f <- function(y, f){
return(y * dnorm(f, 0, 1) / pnorm(y * f))
}
out$d2log.lik.f2 <- function(y, f){
return(as.vector(-dnorm(f)^2/pnorm(y*f)^2 - y * f * dnorm(f) / pnorm(y * f)))
}
return(out)
}
x <- seq(-10,10,length.out=20)
y <- ifelse(x > 0, 1, -1)
kernel <- function(x,y) return(kernel_gaussian(x, y, 1, 1))
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
get.laplace.approx <- function(y, K){
n <- length(y)
f <- rep(99, n); fnew <- rep(0, n)
ll <- get.log.lik()
while(mean((f - fnew)^2) > 1e-8){
f = fnew
W <- - diag(ll$d2log.lik.f2(y, f))
L <-  chol(diag(n) + sqrt(W) %*% K %*% sqrt(W))
b <-  W %*% f + ll$dlog.lik.f(y, f)
a <- b - solve(sqrt(W) %*% t(L), solve(t(L), sqrt(W) %*% K %*% b))
fnew = K %*% a
}
out <- list()
out$f.hat <- fnew
out$sigma.hat <- -diag(ll$d2log.lik.f2(y, out$f.hat))
out$sample <- function(n){
return(rmvnorm(n, out$f.hat, out$sigma.hat))
}
out$density <- function(f){
return(dmvnorm(f, out$f.hat, out$sigma.hat))
}
return(out)
}
laplace.approx <- get.laplace.approx(y, K)
laplace.approx$sample(10)
laplace.approx$density(rep(1,20))
laplace.approx$density(as.vector(laplace.approx$f.hat))
get.approx.marginal <- function(nimp, theta, laplace.approx){
ll <- get.log.lik()
kernel <- function(x,y) return(kernel_gaussian(x, y, theta[1], theta[2]))
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
gp.prior <- list()
gp.prior$density <- function(f){
return(dmvnorm(f, rep(0, length(f)), K))
}
# draw samples
f.samples <- laplace.approx$sample(nimp)
# sum
temp <- 0
for(i in 1:nimp){
f.temp <- f.samples[i,]
temp <- temp + pnorm(y * f.temp) * gp.prior$density(f.temp) / laplace.approx$density(f.temp)
}
return(temp/nimp)
}
get.approx.marginal(100, c(1,1), laplace.approx)
ell.ss.sample <- function(f, K){
n <- nrow(K)
ll <- get.log.lik()
z <- rmvnorm(1, rep(0, n), K)
u <- rexp(1)
eta <- prod(ll$log.lik(y, f)) - u
alpha <- runif(1, 0, 2*pi)
alpha.min <- alpha - 2*pi; alpha.max <- alpha
f.prop <- f * cos(alpha) + z * sin(alpha)
while(prod(ll$log.lik(y, f.prop)) < eta){
f.prop <- f * cos(alpha) + z * sin(alpha)
ifelse(alpha < 0, alpha.min <- 0, alpha.max <- 0)
alpha <- runif(1, alpha.min, alpha.max)
}
return(f.prop)
}
get.prop.distn <- function(sd){
out <- list()
out$sample <-  function(theta){
return(rnorm(1, theta, sd))
}
out$density = function(x, theta){
return(dnorm(x, theta, sd))
}
return(out)
}
prop.distn <- get.prop.distn(0.1)
algo.1 <- function(y, x, nsteps, nimp, init.theta, init.marginal.lik, init.f, prop.distn){
prior <- get.gamma.prior(5,5)
theta.samples <- matrix(NA, nrow=nsteps, ncol=length(init.theta))
f.samples <- matrix(NA, nrow=nsteps, ncol=length(y))
acceptance.ratio <- 0
kernel <- function(x,y) return(kernel_gaussian(x, y, init.theta[1], init.theta[2]))
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
laplace.approx <- get.laplace.approx(y, K)
p.tilde <- get.approx.marginal(nimp, init.theta, laplace.approx)
theta <- init.theta
for(i in 1:nsteps){
theta.prop <- c(prop.distn$sample(theta[1]), prop.distn$sample(theta[2]))
laplace.approx <- get.laplace.approx(y, K)
p.tilde.prop <- get.approx.marginal(nimp, theta.prop, laplace.approx)
acceptance.prob <- min(1, p.tilde.prop * prior$density(theta.prop) / p.tilde / prior$density(theta) * prop.distn$density(theta[1], theta.prop[1]) * prop.distn$density(theta[2], theta.prop[2]) / prop.distn$density(theta.prop[1], theta[1]) / prop.distn$density(theta.prop[1], theta[1]))
if(runif(1) < acceptance.prob){
theta <- theta.prop
p.tilde <- p.tilde.prop
kernel <- function(x,y) return(kernel_gaussian(x, y, theta[1], theta[2]))
K <- outer(x, x, Vectorize(function(x,y) kernel(x, y)))
acceptance.ratio <- acceptance.ratio + 1
}
theta.samples[i,] <- theta
f.samples[i,] <- f <- ell.ss.sample(f, K)
}
acceptance.ratio <- acceptance.ratio/nsteps
out <- list()
out$acceptance.ratio <- acceptance.ratio
out$theta.samples <- theta.samples
out$f.samples <- f.samples
return(out)
}
temp <- algo.1(y, x, 3, 100, c(1,1), rep(0,20), rep(0,20), get.prop.distn(0.01))
alpha=-1
ifelse(alpha < 0, alpha.min <- 0, alpha.max <- 0)
alpha.min
alpha.max
?ifelse
library(mvtnorm)
x = rmvnorm(500, c(1,1))
library(mvtnorm)
x = rmvnorm(500, c(1,1))
pd = data.frame(x=x, y=y)
library(mvtnorm)
x = rmvnorm(500, c(1,1))
y = rmvnorm(50, c(.5, .3), sigma = diag(0.05))
library(ggplot2)
pd = data.frame(x=x, y=y)
y = rmvnorm(50, c(.5, .3), sigma = diag(0.05, 2))
library(ggplot2)
pd = data.frame(x=x, y=y)
pd
ggplot(pd) + geom_point(aes(x=x.1, y=y.1))
x = rmvnorm(500, c(1,1))
ggplot(pd) + geom_point(aes(x=x.1, y=y.1))
?rmvnorm
set.seed(100)
x = rmvnorm(500, c(1,1))
ggplot(pd) + geom_point(aes(x=x.1, y=y.1))
pd = data.frame(x=x, y=y)
ggplot(pd) + geom_point(aes(x=x.1, y=y.1))
ggplot(pd) + geom_point(aes(x=x.1, y=x.1))
ggplot(pd) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) + geom_point(aes(x=x.1, y=x.2)) + geom_bin2d(aes(x=y.1, y=y.2))
ggplot(pd) +  geom_bin2d(aes(x=y.1, y=y.2)) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  geom_bin2d(aes(x=y.1, y=y.2)) + geom_point(aes(x=x.1, y=x.2), bins=70)
ggplot(pd) +  geom_bin2d(aes(x=y.1, y=y.2)) + geom_point(aes(x=x.1, y=x.2), bins=1000)
ggplot(pd) +  geom_bin2d(aes(x=y.1, y=y.2)) + geom_density2d(aes(x=x.1, y=x.2), bins=1000)
ggplot(pd) +  geom_bin2d(aes(x=y.1, y=y.2)) + geom_density2d(aes(x=x.1, y=x.2))
ggplot(pd) +  geom_density2d(aes(x=y.1, y=y.2)) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  stat_density2d(aes(x=y.1, y=y.2)) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  stat_density2d(aes(x=y.1, y=y.2, fill = ..level..)) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..)) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  stat_density_2d(aes(x=y.1, y=y.2), fill = ..level..) + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..), geom="polygon") + geom_point(aes(x=x.1, y=x.2))
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..), geom="polygon")
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.5)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=4, direction=-1)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=3, direction=-1)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=3, direction=)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=2)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=1)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=5)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette=6)
ggplot(pd) +  geom_point(aes(x=x.1, y=x.2))  + stat_density_2d(aes(x=y.1, y=y.2, fill = ..level..),
geom="polygon", alpha = 0.75)  +
scale_fill_distiller(palette="Spectral")
devtools::install_github("github.com/jakespiteri/GPclassification/
tree/master/code/package/gpc")
devtools::install_github("jakespiteri/GPclassification/
tree/master/code/package/gpc")
?devtools::install_github
devtools::install_git("http://github.com/jakespiteri/GPclassification/tree/master/code/package/gpc")
devtools::install_git("jakespiteri/GPclassification/", subdir="/code/package/gpc")
devtools::install_github("jakespiteri/GPclassification/", subdir="/code/package/gpc")
devtools::install_github("/jakespiteri/GPclassification/", subdir="/code/package/gpc")
devtools::install_github("/jakespiteri/GPclassification", subdir="/code/package/gpc")
devtools::install_github("jakespiteri/GPclassification", subdir="/code/package/gpc")
devtools::install_github("jakespiteri/GPclassification", subdir="code/package/gpc")
devtools::install_github("jakespiteri/GPclassification", subdir="code/package/gpc/")
devtools::install_github("jakespiteri/GPclassification", subdir="/code/package/gpc/")
?citet
library(kniknitcitations)
library(knitcitations)
?citet
bib <- read.bibtex("projectrefs.bib")
citet(bib)
citet(bib["storm"])
bibliography()
library(RefManageR)
library(gam)
library(mgcv)
gamSim
gamSim(1)
## Simulate some well correlated ordinal data with temporal structure.
# Use well established simulated data set in mgcv
library(mgcv)
dat <- gamSim(1)
y <- dat$y
x <- dat$f
mu <- dat$x2
## This is the temporal trend
# plot(mu,y)
# plot(mu,x)
# plot(x,y)
## Now we'll pretend the obs come from y while ensemble members come from x
## First make up some thresholds
tholds <- c(5, 9, 15)
## and a function to make a vector ordinal
get_discrete <- function(y,tholds){
n <- length(y)
result <- rep(1,n)
for(j in 1:length(tholds)) result[ y>tholds[j] ] <- 2 + (j-1)
result
}
characters = c(
"Dion", "Dion's Mum", "Dion's half bro", "Goth girl", "Silent gay", "Political Dreadlocks", "Headphones", "Drug dealer", "Princess", "Princess Daddy (Cop)", "Hookman", "Detention Teacher", "Mr Fade"
)
n = length(characters)
romana = characters[sample(characters, 9)]
romana
sample(characters, 9)
sample(characters, 8)
install.packages("googleLanguageR")
library(googleLanguageR)
gl_nlp("i am a god")
library(googleLanguageR)
a = gl_nlp("i am a god")
a$sentences
a$entities
??googleLanguageR
install.packages('blogdown')
blogdown::install_hugo()
setwd("~/Documents/Summer_Projects/kanyenet")
read.csv("data/new_lyrics_clean.csv")
lyrics = read.csv("data/new_lyrics_clean.csv")
lyrics = lyrics$Lyrics
lyrics
?writeLines
writeLines(lyrics, "data/kanye_lyrics.txt")
lyrics = as.character(lyrics$Lyrics)
lyrics = read.csv("data/new_lyrics_clean.csv")
lyrics = as.character(lyrics$Lyrics)
writeLines(lyrics, "data/kanye_lyrics.txt")
library(stringr)
splitl = str_split(lyrics, ".")
splitl
lyrics[1]
?str_split
splitl = str_split(lyrics[1], ".")
splitl
splitl = str_split(lyrics[1], "park")
splitl
splitl = str_split(lyrics[1], ".")
split[[1]]
split1[[1]][1]
splitl[[1]][1]
head(splitl[[1]])
str(splitl)
str(splitl[[1]])
apply(as.matrix(str(splitl[[1]])),1,nchar)
apply(as.matrix((splitl[[1]])),1,nchar)
any(apply(as.matrix((splitl[[1]])),1,nchar)!=0)
splitl = str_split(lyrics[1], "\.")
str_split("hello. this is two sentences", ".")
str_split("hello. this is two sentences", ". ")
strsplit("hello. this is two sentences", ". ")
strsplit("hello. this is two sentences", ".")
strsplit("hello. this is two sentences", "\\.")
splitl = str_split(lyrics[1], "\\.")
spliutl
splitl
paste0(splitl, sep=".")
?paste
paste(splitl, sep=".")
paste(splitl, sep="", collapse = ".")
test = "hello. these are two sentences"
a = strplit(test, "\\,")
a = strplit(test, "\\.")
a = strsplit(test, "\\.")
a
paste(a)
paste(a[[1]])
paste(a[[1]], collapse = ".")
split1 = str_split(lyrics[1], "\\.")
rem = nchar(split1) <= 1
split1 = split1[!rem]
split2 = paste(split1[[1]], collapse=".")
split2
rem
split1
library(stringr)
split1 = str_split(lyrics[1], "\\.")
rem = apply(as.matrix(split1),1, nchar) <= 1
split1 = split1[!rem]
split2 = paste(split1[[1]], collapse=".")
splot2
split2
split1 = str_split(lyrics[1], "\\.")
split1
apply(as.matrix(split1),1, nchar)
apply(as.matrix(split1),2, nchar)
split1
as.matrix(split1)
as.matrix(split1[[1]])
split1 = str_split(lyrics[1], "\\.")
rem = apply(as.matrix(split1[[1]]),2, nchar) <= 1
split1 = split1[!rem]
split2 = paste(split1[[1]], collapse=".")
split2
apply(as.matrix(split1[[1]]),1, nchar)
apply(as.matrix(split1[[1]]),1, nchar)==1
which(apply(as.matrix(split1[[1]]),1, nchar)==1)
split1[[1]][6]
split1 = str_split(lyrics[1], "\\.")
rem = apply(as.matrix(split1[[1]]),1, nchar) <= 1
split1 = split1[!rem]
split2 = paste(split1[[1]], collapse=".")
split2
apply(as.matrix(split1[[1]]),1, nchar)
apply(as.matrix(split1[[1]]),1, nchar) <= 1
split1[!rem]
rem
split1
split1 = str_split(lyrics[1], "\\.")
rem = apply(as.matrix(split1[[1]]),1, nchar) <= 1
split1 = split1[[1]][!rem]
split2 = paste(split1, collapse=".")
split2
lyrics
length(lyrics)
lyrics = read.csv("data/new_lyrics_clean.csv")
lyrics = as.character(lyrics$Lyrics)
lyrics_out = rep(NA, length(lyrics))
for(i in 1:length(lyrics)){
split1 = strsplit(lyrics[i], "\\.")
rem = apply(as.matrix(split1[[1]]),1, nchar) <= 1
split1 = split1[[1]][!rem]
split2 = paste(split1, collapse=".")
lyrics_out[i] = split2
}
writeLines(lyrics_out, "data/kanye_lyrics.txt")
lyrics_out[1]
